{"version":3,"sources":["components/Visualizer/Visualizations/VisualizationHOC.tsx","utils/colors.ts","components/Visualizer/Visualizations/Drummer/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","wrap","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","defaultProps","data","Uint8Array","lowPassData","options","WrappedComponent","_ref","arguments","length","undefined","rawIntensitiesRef","useRef","lowPassIntensitiesRef","startingTimestampRef","Date","now","totalDifferenceFromRawBaseline","totalDifferenceFromLowBaseline","renderedData","map","rawDataElement","i","Math","abs","lowPassDataElement","smoothing","sum","count","rangeIndex","rawIntensityMax","lowPassIntensitySum","lowPassIntensityCount","lowPassIntensityMax","current","forEach","rawIntensity","lowPassIntensity","currentRawIntensity","recentLowPassAvgIntensity","currentLowPassIntensity","concat","shift","isBeat","a","createElement","intensity","colorTriples","colorTriple","id","randomColorTriple","floor","random","getRandomColors","numColors","areUnique","colors","randomTriple","randomColor","includes","push","getRandomColor","getRandomColorTriple","colorCopy","Object","_Users_jerry_git_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","reverse","minHitCount","DATA_SIZE","VisualizationHOC","_useState","useState","_useState2","_Users_jerry_git_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","size","setSize","_useState3","_useState4","colorSize","setColorSize","colorsRef","values","lastChangedTimestamp","useDebouncedResize","_window","window","innerWidth","innerHeight","maxSideLength","max","colorDiameter","sqrt","pow","freqMap","freqKey","freqData","ceiling","newColor","drummers","entries","_ref2","_ref3","hitCount","drummerContainerSize","react__WEBPACK_IMPORTED_MODULE_3___default","key","className","style","width","height","opacity","classNames","hit","smallestDrummerSize","transitions","useTransition","from","item","backgroundColor","scale","enter","leave","config","slow","_ref4","props","_ref5","_Users_jerry_git_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react_spring__WEBPACK_IMPORTED_MODULE_4__","div","_Users_jerry_git_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","transform","interpolate","s"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAmBMG,GAnBNP,EAAA,IAmB4B,CAC1BQ,KAAM,IAAIC,WACVC,YAAa,IAAID,WACjBE,QAAS,KAIJ,SAASR,EACdS,GAEA,OAAO,WAA+D,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAdP,EAAtCC,EAAoDK,EAApDL,KAAME,EAA8CG,EAA9CH,YAAaC,EAAiCE,EAAjCF,QAC7BM,EAAoBC,iBAAiB,IACrCC,EAAwBD,iBAAiB,IACzCE,EAAuBF,iBAAeG,KAAKC,OAE7CC,EAAiC,EACjCC,EAAiC,EAE/BC,EAAejB,EAAKkB,IAAI,SAACC,EAAgBC,GAC7CL,GAAkCM,KAAKC,IAAIH,EAAiB,KAE5D,IAAMI,EAAqBrB,EAAYkB,GAGvC,GAFAJ,GAAkCK,KAAKC,IAAIC,EAAqB,KAEjD,MAAXpB,GAAoBA,EAAQqB,UAEzB,CAQL,IALA,IAAIC,EAAM,EACNC,EAAQ,EAERC,EAAaP,EAAIjB,EAAQqB,UAEtBG,EAAaP,EAAIjB,EAAQqB,WAAW,CAEzCC,GAD4BzB,EAAK2B,IAAe,IAEhDD,GAAS,EACTC,GAAc,EAGhB,OAAOF,EAAMC,EAhBb,OAAOP,IAoBPS,EAAkB,EAElBC,EAAsB,EACtBC,EAAwB,EACxBC,EAAsB,EAE1BtB,EAAkBuB,QAAQC,QAAQ,SAACC,EAAcd,GAC3Cc,EAAeN,IACjBA,EAAkBM,GAGpB,IAAMC,EAAmBxB,EAAsBqB,QAAQZ,GACvDS,GAAuBM,EACvBL,GAAyB,EAErBK,EAAmBJ,IACrBA,EAAsBI,KAI1B,IAAMC,EAAsBrB,EAAiCf,EAAKO,OAC5D8B,EACJR,EAAsBC,GAAyB,EAE3CQ,EACJtB,EAAiCd,EAAYK,OAE/CE,EAAkBuB,QAAUvB,EAAkBuB,QAAQO,OACpDH,GAEFzB,EAAsBqB,QAAUrB,EAAsBqB,QAAQO,OAC5DD,GAIEzB,KAAKC,MAAQF,EAAqBoB,QAAU,MAC9CvB,EAAkBuB,QAAQQ,QAC1B7B,EAAsBqB,QAAQQ,SAGhC,IAAMC,EAASH,EAAsD,IAA5BD,EAEzC,OACExC,EAAA6C,EAAAC,cAACvC,EAAD,CACEJ,KAAMiB,EACNf,YAAaA,EACbuC,OAAQA,EACRG,UAAWR,EACXD,iBAAkBG,wKChHpBO,EAAe,CACnB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,YAGGA,EAAa3B,IAAI,SAAC4B,EAAa1B,GAAd,MAAqB,CAChE2B,GAAI3B,EACJ0B,iBAGF,SAASE,IACP,OAAOH,EAAaxB,KAAK4B,MAAM5B,KAAK6B,SAAWL,EAAatC,SAGvD,SAAS4C,EAAgBC,EAAmBC,GAGjD,IAFA,IAAMC,EAAmB,GAElBA,EAAO/C,OAAS6C,GAAW,CAChC,IAAMG,EAAeP,IACfQ,EAAcD,EAAalC,KAAK4B,MAAM5B,KAAK6B,SAAWK,EAAahD,SAEzE,GAAI8C,GAAaC,EAAOG,SAASD,GAC/B,MAGFF,EAAOI,KAAKF,GAEd,OAAOF,EAGF,SAASK,IACd,OAAOR,EAAgB,GAAG,GAGrB,SAASS,IACd,IAAMC,EAASC,OAAAC,EAAA,EAAAD,CAAOd,KACtB,OAAI3B,KAAK6B,UAAY,GACZW,EAAUG,UAEVH,oKCnCLI,SALgB,IAKcC,KAuHrBC,cArH0C,SAAA9D,GAAsB,IAAnBL,EAAmBK,EAAnBL,KAAMyC,EAAapC,EAAboC,OAAa2B,EACrDC,mBAAS,GAD4CC,EAAAR,OAAAS,EAAA,EAAAT,CAAAM,EAAA,GACtEI,EADsEF,EAAA,GAChEG,EADgEH,EAAA,GAAAI,EAE3CL,mBAAS,GAFkCM,EAAAb,OAAAS,EAAA,EAAAT,CAAAY,EAAA,GAEtEE,EAFsED,EAAA,GAE3DE,EAF2DF,EAAA,GAIvEG,EAAYpE,iBAAO,CACvBqE,OAAQ,CAACpB,eACTqB,qBAAsBnE,KAAKC,QAG7BmE,YAAmB,WAAM,IAAAC,EACaC,OAA5BC,EADeF,EACfE,WAAYC,EADGH,EACHG,YACdC,EAAgBjE,KAAKkE,IAAIH,EAAYC,GAC3CZ,EAAwB,EAAhBa,GAER,IAAME,EAAgBnE,KAAKoE,KACzBpE,KAAKqE,IAAIN,EAAY,GAAK/D,KAAKqE,IAAIL,EAAa,IAElDR,EAAaW,IACZ,IAQH,IANA,IAAMlC,EAASwB,EAAU9C,QAGnB2D,EAAqC,GAGlCC,EAAU,EAAGA,EA9BH,EA8B0BA,IAC3CD,EAAQC,GAAW,EAGrB5F,EAAKiC,QAAQ,SAAA4D,GACX,IAAK,IAAID,EAAU,EAAGA,EAnCL,EAmC4BA,IAAW,CACtD,IAAME,EARU,IA5BD,GAoCgBF,EAAU,GACzC,GACEvE,KAAKC,IAAIuE,EAAW,KAxCI,IAyCxBA,GAAYC,EACZ,CACAH,EAAQC,IAAY,EACpB,UAMN,IAAM9E,EAAMD,KAAKC,MACjB,GACE2B,GACA3B,EAAMwC,EAAO0B,qBApDsB,IAqDnC,CACA,IAAIe,EACJ,GACEA,EAAWpC,oBACJL,EAAOyB,OAAOzB,EAAOyB,OAAOxE,OAAS,KAAOwF,GAErDzC,EAAOyB,OAAOrB,KAAKqC,GACfzC,EAAOyB,OAAOxE,OAAS,GACzB+C,EAAOyB,OAAOvC,QAEhBc,EAAO0B,qBAAuBlE,EAGhC,IAAMkF,EAAWlC,OAAOmC,QAAQN,GAASzE,IAAI,SAAAgF,EAAsB9E,GAAM,IAAA+E,EAAArC,OAAAS,EAAA,EAAAT,CAAAoC,EAAA,GAA1BN,EAA0BO,EAAA,GAAjBC,EAAiBD,EAAA,GACjEE,IAA8BT,EAAL,GAAgBpB,EAlE9B,EAoEjB,OACE8B,EAAA5D,EAAAC,cAAA,OACE4D,IAAKX,EACLY,UAAU,oBACVC,MAAO,CACLC,MAAK,GAAAnE,OAAK8D,EAAL,MACLM,OAAM,GAAApE,OAAK8D,EAAL,MACNO,SA3EW,EA2EcxF,GA3Ed,EA2EkC,GAAM,MAGrDkF,EAAA5D,EAAAC,cAAA,OAAK6D,UAAWK,IAAW,OAAQ,CAAEC,IAAKV,EAAWnC,SAKrD8C,EAAsBvC,EAAI,GAE1BwC,EAAcC,YAAc3D,EAAOyB,OAAQ,KAAM,CACrDmC,KAAM,SAAAC,GAAI,MAAK,CACbC,gBAAiBD,EACjBT,MAAOK,EACPJ,OAAQI,EACRM,MAAO,IAETC,MAAO,CAAED,MAAQzC,EAAYmC,EAAuB,KACpDQ,MAAO,CAAEF,MAAO,GAChBG,OAAQA,IAAOC,OAGjB,OACEnB,EAAA5D,EAAAC,cAAA,OAAK6D,UAAU,WACZR,EACAgB,EAAY9F,IAAI,SAAAwG,GAA0BA,EAAvBP,KAAuB,IAAjBQ,EAAiBD,EAAjBC,MAAOpB,EAAUmB,EAAVnB,IAAUqB,EACbD,EAApBN,EADiCO,EACjCP,MAAUZ,EADuB3C,OAAA+D,EAAA,EAAA/D,CAAA8D,EAAA,WAGzC,OACEtB,EAAA5D,EAAAC,cAACmF,EAAA,EAASC,IAAV,CACEvB,UAAU,gBACVD,IAAKA,EACLE,MAAK3C,OAAAkE,EAAA,EAAAlE,CAAA,GACA2C,EADA,CAEHwB,UAAWC,YACT,CAACb,GACD,SAACc,GAAD,iBAAA5F,OAA0B4F,EAA1B,MAAA5F,OAAgC4F,EAAhC,MAAA5F,OAAsC4F,EAAtC","file":"static/js/4.6bced5b3.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { Options } from './index';\nimport './Visualization.scss';\n\nexport type Props = {\n  // array of frequency data with values 0-255\n  data: Uint8Array;\n  lowPassData: Uint8Array;\n  options?: Options;\n};\n\nexport type WrappedProps = {\n  data: Uint8Array;\n  lowPassData: Uint8Array;\n  isBeat: boolean;\n  intensity: number;\n  lowPassIntensity: number;\n};\n\nconst defaultProps: Props = {\n  data: new Uint8Array(),\n  lowPassData: new Uint8Array(),\n  options: {}\n};\n\n// all visualization components should be wrapped with this HOC\nexport function wrap(\n  WrappedComponent: React.ComponentType<WrappedProps>\n): React.ComponentType<Props> {\n  return function({ data, lowPassData, options }: Props = defaultProps) {\n    const rawIntensitiesRef = useRef<number[]>([]);\n    const lowPassIntensitiesRef = useRef<number[]>([]);\n    const startingTimestampRef = useRef<number>(Date.now());\n\n    let totalDifferenceFromRawBaseline = 0;\n    let totalDifferenceFromLowBaseline = 0;\n\n    const renderedData = data.map((rawDataElement, i) => {\n      totalDifferenceFromRawBaseline += Math.abs(rawDataElement - 128);\n\n      const lowPassDataElement = lowPassData[i];\n      totalDifferenceFromLowBaseline += Math.abs(lowPassDataElement - 128);\n\n      if (options == null || !options.smoothing) {\n        return rawDataElement;\n      } else {\n        // smooth out each data value using a range of values around it,\n        // the range of this window is the value of options.smoothing\n        let sum = 0;\n        let count = 0;\n\n        let rangeIndex = i - options.smoothing;\n\n        while (rangeIndex < i + options.smoothing) {\n          const rawDataAtRangeIndex = data[rangeIndex] || 128;\n          sum += rawDataAtRangeIndex;\n          count += 1;\n          rangeIndex += 1;\n        }\n\n        return sum / count;\n      }\n    });\n\n    let rawIntensityMax = 0;\n\n    let lowPassIntensitySum = 0;\n    let lowPassIntensityCount = 0;\n    let lowPassIntensityMax = 0;\n\n    rawIntensitiesRef.current.forEach((rawIntensity, i) => {\n      if (rawIntensity > rawIntensityMax) {\n        rawIntensityMax = rawIntensity;\n      }\n\n      const lowPassIntensity = lowPassIntensitiesRef.current[i];\n      lowPassIntensitySum += lowPassIntensity;\n      lowPassIntensityCount += 1;\n\n      if (lowPassIntensity > lowPassIntensityMax) {\n        lowPassIntensityMax = lowPassIntensity;\n      }\n    });\n\n    const currentRawIntensity = totalDifferenceFromRawBaseline / data.length;\n    const recentLowPassAvgIntensity =\n      lowPassIntensitySum / lowPassIntensityCount || 0;\n\n    const currentLowPassIntensity =\n      totalDifferenceFromLowBaseline / lowPassData.length;\n\n    rawIntensitiesRef.current = rawIntensitiesRef.current.concat(\n      currentRawIntensity\n    );\n    lowPassIntensitiesRef.current = lowPassIntensitiesRef.current.concat(\n      currentLowPassIntensity\n    );\n\n    // remove intensities older than 2 seconds\n    if (Date.now() - startingTimestampRef.current > 2000) {\n      rawIntensitiesRef.current.shift();\n      lowPassIntensitiesRef.current.shift();\n    }\n\n    const isBeat = currentLowPassIntensity > recentLowPassAvgIntensity * 1.5;\n\n    return (\n      <WrappedComponent\n        data={renderedData}\n        lowPassData={lowPassData}\n        isBeat={isBeat}\n        intensity={currentRawIntensity}\n        lowPassIntensity={currentLowPassIntensity}\n      />\n    );\n  };\n}\n","const colorTriples = [\n  ['#0E9AA7', '#F6CD61', '#FE8A71'],\n  ['#EE4540', '#801336', '#2D142C'],\n  ['#8FB9A8', '#FDFBD4', '#FCD0BA'],\n  ['#AC6D83', '#685D79', '#465C7A'],\n  ['#F36E38', '#EF4648', '#582841'],\n  ['#F1F1F1', '#9BD7D1', '#305D7A'],\n  ['#DEA5B6', '#F3CD8C', '#F2E9C2'],\n  ['#E27B47', '#EFCA58', '#46B29E'],\n  ['#2E7345', '#2E9975', '#2DB3B3'],\n  ['#52A3CC', '#7EA1E5', '#AAAAF2'],\n  ['#CC5285', '#CC5285', '#F2BCAA'],\n  ['#D8E0BB', '#B6CEC7', '#86A3C3']\n];\n\nconst colorTriplesWithIds = colorTriples.map((colorTriple, i) => ({\n  id: i,\n  colorTriple\n}));\n\nfunction randomColorTriple() {\n  return colorTriples[Math.floor(Math.random() * colorTriples.length)];\n}\n\nexport function getRandomColors(numColors: number, areUnique?: boolean): string[] {\n  const colors: string[] = [];\n\n  while (colors.length < numColors) {\n    const randomTriple = randomColorTriple();\n    const randomColor = randomTriple[Math.floor(Math.random() * randomTriple.length)];\n\n    if (areUnique && colors.includes(randomColor)) {\n      break;\n    }\n\n    colors.push(randomColor);\n  }\n  return colors;\n}\n\nexport function getRandomColor() {\n  return getRandomColors(1)[0];\n}\n\nexport function getRandomColorTriple() {\n  const colorCopy = [...randomColorTriple()];\n  if (Math.random() <= 0.5) {\n    return colorCopy.reverse();\n  } else {\n    return colorCopy;\n  }\n}\n","import React, { useState, useRef } from 'react';\nimport { useTransition, animated, interpolate, config } from 'react-spring';\nimport classNames from 'classnames';\nimport * as VisualizationHOC from '../VisualizationHOC';\nimport { useDebouncedResize } from '../../../../utils/hooks';\nimport { getRandomColor } from '../../../../utils/colors';\nimport { DATA_SIZE } from '../../../../config';\nimport './Drummer.scss';\n\nconst MIN_HIT_COUNT = 0.04;\nconst MIN_FREQUENCY_VARIATION = 10;\nconst MIN_DELAY_BETWEEN_COLOR_CHANGE = 200;\nconst NUM_DRUMMERS = 7;\n\nconst minHitCount = MIN_HIT_COUNT * DATA_SIZE;\n\nconst Drummer: React.FC<VisualizationHOC.WrappedProps> = ({ data, isBeat }) => {\n  const [size, setSize] = useState(0);\n  const [colorSize, setColorSize] = useState(0);\n\n  const colorsRef = useRef({\n    values: [getRandomColor()],\n    lastChangedTimestamp: Date.now()\n  });\n\n  useDebouncedResize(() => {\n    const { innerWidth, innerHeight } = window;\n    const maxSideLength = Math.max(innerWidth, innerHeight);\n    setSize(maxSideLength * 2);\n\n    const colorDiameter = Math.sqrt(\n      Math.pow(innerWidth, 2) + Math.pow(innerHeight, 2)\n    );\n    setColorSize(colorDiameter);\n  }, []);\n\n  const colors = colorsRef.current;\n  const numDrummers = NUM_DRUMMERS;\n\n  const freqMap: { [key: string]: number } = {};\n  const numPerSlice = 256 / numDrummers;\n\n  for (let freqKey = 0; freqKey < numDrummers; freqKey++) {\n    freqMap[freqKey] = 0;\n  }\n\n  data.forEach(freqData => {\n    for (let freqKey = 0; freqKey < numDrummers; freqKey++) {\n      const ceiling = numPerSlice * (freqKey + 1);\n      if (\n        Math.abs(freqData - 128) > MIN_FREQUENCY_VARIATION &&\n        freqData <= ceiling\n      ) {\n        freqMap[freqKey] += 1;\n        break;\n      }\n    }\n  });\n\n  // space out background color changes so they're not jarring\n  const now = Date.now();\n  if (\n    isBeat &&\n    now - colors.lastChangedTimestamp > MIN_DELAY_BETWEEN_COLOR_CHANGE\n  ) {\n    let newColor;\n    do {\n      newColor = getRandomColor();\n    } while (colors.values[colors.values.length - 1] === newColor);\n\n    colors.values.push(newColor);\n    if (colors.values.length > 1) {\n      colors.values.shift();\n    }\n    colors.lastChangedTimestamp = now;\n  }\n\n  const drummers = Object.entries(freqMap).map(([freqKey, hitCount], i) => {\n    const drummerContainerSize = ((1 + +freqKey) * size) / numDrummers;\n\n    return (\n      <div\n        key={freqKey}\n        className=\"drummer-container\"\n        style={{\n          width: `${drummerContainerSize}px`,\n          height: `${drummerContainerSize}px`,\n          opacity: ((numDrummers - i) / numDrummers) * 0.5 * 0.25\n        }}\n      >\n        <div className={classNames('beat', { hit: hitCount > minHitCount })} />\n      </div>\n    );\n  });\n\n  const smallestDrummerSize = size / (numDrummers * 2);\n\n  const transitions = useTransition(colors.values, null, {\n    from: item => ({\n      backgroundColor: item,\n      width: smallestDrummerSize,\n      height: smallestDrummerSize,\n      scale: 1\n    }),\n    enter: { scale: (colorSize / smallestDrummerSize) * 1.5 },\n    leave: { scale: 0 },\n    config: config.slow\n  });\n\n  return (\n    <div className=\"drummer\">\n      {drummers}\n      {transitions.map(({ item, props, key }) => {\n        const { scale, ...style } = props as any;\n\n        return (\n          <animated.div\n            className=\"color-overlay\"\n            key={key}\n            style={{\n              ...style,\n              transform: interpolate(\n                [scale],\n                (s: number) => `scale3d(${s}, ${s}, ${s})`\n              )\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default VisualizationHOC.wrap(Drummer);\n"],"sourceRoot":""}