{"version":3,"sources":["components/Visualizer/Visualizations/VisualizationHOC.tsx","utils/colors.ts","components/Visualizer/Visualizations/Drummer/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","wrap","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","defaultProps","data","Uint8Array","lowPassData","options","WrappedComponent","_ref","arguments","length","undefined","rawIntensitiesRef","useRef","lowPassIntensitiesRef","startingTimestampRef","Date","now","totalDifferenceFromRawBaseline","totalDifferenceFromLowBaseline","renderedData","map","rawDataElement","i","Math","abs","lowPassDataElement","smoothing","sum","count","rangeIndex","rawIntensityMax","lowPassIntensitySum","lowPassIntensityCount","lowPassIntensityMax","current","forEach","rawIntensity","lowPassIntensity","currentRawIntensity","recentLowPassAvgIntensity","currentLowPassIntensity","concat","shift","isBeat","a","createElement","intensity","colorTriples","colorTriple","id","randomColorTriple","floor","random","getRandomColors","numColors","areUnique","colors","randomTriple","randomColor","includes","push","getRandomColor","getRandomColorTriple","colorCopy","Object","C_Users_gao_Documents_Code_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","reverse","minHitCount","DATA_SIZE","VisualizationHOC","_useState","useState","_useState2","C_Users_gao_Documents_Code_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","size","setSize","_useState3","_useState4","colorSize","setColorSize","colorsRef","values","lastChangedTimestamp","useDebouncedResize","_window","window","innerWidth","innerHeight","maxSideLength","max","colorDiameter","sqrt","pow","freqMap","freqKey","freqData","ceiling","newColor","drummers","entries","_ref2","_ref3","hitCount","drummerContainerSize","react__WEBPACK_IMPORTED_MODULE_3___default","key","className","style","width","height","opacity","classNames","hit","smallestDrummerSize","transitions","useTransition","from","item","backgroundColor","scale","enter","leave","config","slow","_ref4","props","_ref5","C_Users_gao_Documents_Code_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react_spring__WEBPACK_IMPORTED_MODULE_4__","div","C_Users_gao_Documents_Code_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","transform","interpolate","s"],"mappings":"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","file":"static/js/4.ae9b0450.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Options } from './index';\r\nimport './Visualization.scss';\r\n\r\nexport type Props = {\r\n  // array of frequency data with values 0-255\r\n  data: Uint8Array;\r\n  lowPassData: Uint8Array;\r\n  options?: Options;\r\n};\r\n\r\nexport type WrappedProps = {\r\n  data: Uint8Array;\r\n  lowPassData: Uint8Array;\r\n  isBeat: boolean;\r\n  intensity: number;\r\n  lowPassIntensity: number;\r\n};\r\n\r\nconst defaultProps: Props = {\r\n  data: new Uint8Array(),\r\n  lowPassData: new Uint8Array(),\r\n  options: {}\r\n};\r\n\r\n// all visualization components should be wrapped with this HOC\r\nexport function wrap(\r\n  WrappedComponent: React.ComponentType<WrappedProps>\r\n): React.ComponentType<Props> {\r\n  return function({ data, lowPassData, options }: Props = defaultProps) {\r\n    const rawIntensitiesRef = useRef<number[]>([]);\r\n    const lowPassIntensitiesRef = useRef<number[]>([]);\r\n    const startingTimestampRef = useRef<number>(Date.now());\r\n\r\n    let totalDifferenceFromRawBaseline = 0;\r\n    let totalDifferenceFromLowBaseline = 0;\r\n\r\n    const renderedData = data.map((rawDataElement, i) => {\r\n      totalDifferenceFromRawBaseline += Math.abs(rawDataElement - 128);\r\n\r\n      const lowPassDataElement = lowPassData[i];\r\n      totalDifferenceFromLowBaseline += Math.abs(lowPassDataElement - 128);\r\n\r\n      if (options == null || !options.smoothing) {\r\n        return rawDataElement;\r\n      } else {\r\n        // smooth out each data value using a range of values around it,\r\n        // the range of this window is the value of options.smoothing\r\n        let sum = 0;\r\n        let count = 0;\r\n\r\n        let rangeIndex = i - options.smoothing;\r\n\r\n        while (rangeIndex < i + options.smoothing) {\r\n          const rawDataAtRangeIndex = data[rangeIndex] || 128;\r\n          sum += rawDataAtRangeIndex;\r\n          count += 1;\r\n          rangeIndex += 1;\r\n        }\r\n\r\n        return sum / count;\r\n      }\r\n    });\r\n\r\n    let rawIntensityMax = 0;\r\n\r\n    let lowPassIntensitySum = 0;\r\n    let lowPassIntensityCount = 0;\r\n    let lowPassIntensityMax = 0;\r\n\r\n    rawIntensitiesRef.current.forEach((rawIntensity, i) => {\r\n      if (rawIntensity > rawIntensityMax) {\r\n        rawIntensityMax = rawIntensity;\r\n      }\r\n\r\n      const lowPassIntensity = lowPassIntensitiesRef.current[i];\r\n      lowPassIntensitySum += lowPassIntensity;\r\n      lowPassIntensityCount += 1;\r\n\r\n      if (lowPassIntensity > lowPassIntensityMax) {\r\n        lowPassIntensityMax = lowPassIntensity;\r\n      }\r\n    });\r\n\r\n    const currentRawIntensity = totalDifferenceFromRawBaseline / data.length;\r\n    const recentLowPassAvgIntensity =\r\n      lowPassIntensitySum / lowPassIntensityCount || 0;\r\n\r\n    const currentLowPassIntensity =\r\n      totalDifferenceFromLowBaseline / lowPassData.length;\r\n\r\n    rawIntensitiesRef.current = rawIntensitiesRef.current.concat(\r\n      currentRawIntensity\r\n    );\r\n    lowPassIntensitiesRef.current = lowPassIntensitiesRef.current.concat(\r\n      currentLowPassIntensity\r\n    );\r\n\r\n    // remove intensities older than 2 seconds\r\n    if (Date.now() - startingTimestampRef.current > 2000) {\r\n      rawIntensitiesRef.current.shift();\r\n      lowPassIntensitiesRef.current.shift();\r\n    }\r\n\r\n    const isBeat = currentLowPassIntensity > recentLowPassAvgIntensity * 1.5;\r\n\r\n    return (\r\n      <WrappedComponent\r\n        data={renderedData}\r\n        lowPassData={lowPassData}\r\n        isBeat={isBeat}\r\n        intensity={currentRawIntensity}\r\n        lowPassIntensity={currentLowPassIntensity}\r\n      />\r\n    );\r\n  };\r\n}\r\n","const colorTriples = [\r\n  ['#0E9AA7', '#F6CD61', '#FE8A71'],\r\n  ['#EE4540', '#801336', '#2D142C'],\r\n  ['#8FB9A8', '#FDFBD4', '#FCD0BA'],\r\n  ['#AC6D83', '#685D79', '#465C7A'],\r\n  ['#F36E38', '#EF4648', '#582841'],\r\n  ['#F1F1F1', '#9BD7D1', '#305D7A'],\r\n  ['#DEA5B6', '#F3CD8C', '#F2E9C2'],\r\n  ['#E27B47', '#EFCA58', '#46B29E'],\r\n  ['#2E7345', '#2E9975', '#2DB3B3'],\r\n  ['#52A3CC', '#7EA1E5', '#AAAAF2'],\r\n  ['#CC5285', '#CC5285', '#F2BCAA'],\r\n  ['#D8E0BB', '#B6CEC7', '#86A3C3']\r\n];\r\n\r\nconst colorTriplesWithIds = colorTriples.map((colorTriple, i) => ({\r\n  id: i,\r\n  colorTriple\r\n}));\r\n\r\nfunction randomColorTriple() {\r\n  return colorTriples[Math.floor(Math.random() * colorTriples.length)];\r\n}\r\n\r\nexport function getRandomColors(numColors: number, areUnique?: boolean): string[] {\r\n  const colors: string[] = [];\r\n\r\n  while (colors.length < numColors) {\r\n    const randomTriple = randomColorTriple();\r\n    const randomColor = randomTriple[Math.floor(Math.random() * randomTriple.length)];\r\n\r\n    if (areUnique && colors.includes(randomColor)) {\r\n      break;\r\n    }\r\n\r\n    colors.push(randomColor);\r\n  }\r\n  return colors;\r\n}\r\n\r\nexport function getRandomColor() {\r\n  return getRandomColors(1)[0];\r\n}\r\n\r\nexport function getRandomColorTriple() {\r\n  const colorCopy = [...randomColorTriple()];\r\n  if (Math.random() <= 0.5) {\r\n    return colorCopy.reverse();\r\n  } else {\r\n    return colorCopy;\r\n  }\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport { useTransition, animated, interpolate, config } from 'react-spring';\r\nimport classNames from 'classnames';\r\nimport * as VisualizationHOC from '../VisualizationHOC';\r\nimport { useDebouncedResize } from '../../../../utils/hooks';\r\nimport { getRandomColor } from '../../../../utils/colors';\r\nimport { DATA_SIZE } from '../../../../config';\r\nimport './Drummer.scss';\r\n\r\nconst MIN_HIT_COUNT = 0.04;\r\nconst MIN_FREQUENCY_VARIATION = 10;\r\nconst MIN_DELAY_BETWEEN_COLOR_CHANGE = 200;\r\nconst NUM_DRUMMERS = 10;\r\n\r\nconst minHitCount = MIN_HIT_COUNT * DATA_SIZE;\r\n\r\nconst Drummer: React.FC<VisualizationHOC.WrappedProps> = ({ data, isBeat }) => {\r\n  const [size, setSize] = useState(0);\r\n  const [colorSize, setColorSize] = useState(0);\r\n\r\n  const colorsRef = useRef({\r\n    values: [getRandomColor()],\r\n    lastChangedTimestamp: Date.now()\r\n  });\r\n\r\n  useDebouncedResize(() => {\r\n    const { innerWidth, innerHeight } = window;\r\n    const maxSideLength = Math.max(innerWidth, innerHeight);\r\n    setSize(maxSideLength * 2);\r\n\r\n    const colorDiameter = Math.sqrt(\r\n      Math.pow(innerWidth, 2) + Math.pow(innerHeight, 2)\r\n    );\r\n    setColorSize(colorDiameter);\r\n  }, []);\r\n\r\n  const colors = colorsRef.current;\r\n  const numDrummers = NUM_DRUMMERS;\r\n\r\n  const freqMap: { [key: string]: number } = {};\r\n  const numPerSlice = 256 / numDrummers;\r\n\r\n  for (let freqKey = 0; freqKey < numDrummers; freqKey++) {\r\n    freqMap[freqKey] = 0;\r\n  }\r\n\r\n  data.forEach(freqData => {\r\n    for (let freqKey = 0; freqKey < numDrummers; freqKey++) {\r\n      const ceiling = numPerSlice * (freqKey + 1);\r\n      if (\r\n        Math.abs(freqData - 128) > MIN_FREQUENCY_VARIATION &&\r\n        freqData <= ceiling\r\n      ) {\r\n        freqMap[freqKey] += 1;\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  // space out background color changes so they're not jarring\r\n  const now = Date.now();\r\n  if (\r\n    isBeat &&\r\n    now - colors.lastChangedTimestamp > MIN_DELAY_BETWEEN_COLOR_CHANGE\r\n  ) {\r\n    let newColor;\r\n    do {\r\n      newColor = getRandomColor();\r\n    } while (colors.values[colors.values.length - 1] === newColor);\r\n\r\n    colors.values.push(newColor);\r\n    if (colors.values.length > 1) {\r\n      colors.values.shift();\r\n    }\r\n    colors.lastChangedTimestamp = now;\r\n  }\r\n\r\n  const drummers = Object.entries(freqMap).map(([freqKey, hitCount], i) => {\r\n    const drummerContainerSize = ((1 + +freqKey) * size) / numDrummers;\r\n\r\n    return (\r\n      <div\r\n        key={freqKey}\r\n        className=\"drummer-container\"\r\n        style={{\r\n          width: `${drummerContainerSize}px`,\r\n          height: `${drummerContainerSize}px`,\r\n          opacity: ((numDrummers - i) / numDrummers) * 0.5 * 0.25\r\n        }}\r\n      >\r\n        <div className={classNames('beat', { hit: hitCount > minHitCount })} />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const smallestDrummerSize = size / (numDrummers * 2);\r\n\r\n  const transitions = useTransition(colors.values, null, {\r\n    from: item => ({\r\n      backgroundColor: item,\r\n      width: smallestDrummerSize,\r\n      height: smallestDrummerSize,\r\n      scale: 1\r\n    }),\r\n    enter: { scale: (colorSize / smallestDrummerSize) * 1.5 },\r\n    leave: { scale: 0 },\r\n    config: config.slow\r\n  });\r\n\r\n  return (\r\n    <div className=\"drummer\">\r\n      {drummers}\r\n      {transitions.map(({ item, props, key }) => {\r\n        const { scale, ...style } = props as any;\r\n\r\n        return (\r\n          <animated.div\r\n            className=\"color-overlay\"\r\n            key={key}\r\n            style={{\r\n              ...style,\r\n              transform: interpolate(\r\n                [scale],\r\n                (s: number) => `translate3d(0, 0, 0) scale(${s})`\r\n              )\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualizationHOC.wrap(Drummer);\r\n"],"sourceRoot":""}