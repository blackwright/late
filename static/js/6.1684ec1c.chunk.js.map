{"version":3,"sources":["components/Visualizer/Visualizations/VisualizationHOC.tsx","utils/colors.ts","components/Visualizer/Visualizations/Waveform/index.tsx","components/Visualizer/Visualizations/Waveform/utils.ts"],"names":["__webpack_require__","d","__webpack_exports__","wrap","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","defaultProps","data","Uint8Array","lowPassData","options","WrappedComponent","_ref","arguments","length","undefined","rawIntensitiesRef","useRef","lowPassIntensitiesRef","startingTimestampRef","Date","now","totalDifferenceFromRawBaseline","totalDifferenceFromLowBaseline","renderedData","map","rawDataElement","i","Math","abs","lowPassDataElement","smoothing","sum","count","rangeIndex","rawIntensityMax","lowPassIntensitySum","lowPassIntensityCount","lowPassIntensityMax","current","forEach","rawIntensity","lowPassIntensity","currentRawIntensity","recentLowPassAvgIntensity","currentLowPassIntensity","concat","shift","isBeat","a","createElement","intensity","colorTriples","colorTriple","id","randomColorTriple","floor","random","getRandomColors","numColors","areUnique","colors","randomTriple","randomColor","includes","push","getRandomColor","getRandomColorTriple","colorCopy","Object","_Users_jerry_git_late_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","reverse","VisualizationHOC","canvasRef","useDebouncedResize","_window","window","innerWidth","innerHeight","_window$devicePixelRa","devicePixelRatio","canvas","width","height","ctx","getContext","fillStyle","fillRect","useEffect","intervalId","setInterval","clearInterval","lineWidth","lineCap","getColors","sliceWidth","color","strokeStyle","beginPath","x","moveTo","dataElement","y","lineTo","stroke","react_default","className","ref"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAmBMG,GAnBNP,EAAA,IAmB4B,CAC1BQ,KAAM,IAAIC,WACVC,YAAa,IAAID,WACjBE,QAAS,KAIJ,SAASR,EACdS,GAEA,OAAO,WAA+D,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAdP,EAAtCC,EAAoDK,EAApDL,KAAME,EAA8CG,EAA9CH,YAAaC,EAAiCE,EAAjCF,QAC7BM,EAAoBC,iBAAiB,IACrCC,EAAwBD,iBAAiB,IACzCE,EAAuBF,iBAAeG,KAAKC,OAE7CC,EAAiC,EACjCC,EAAiC,EAE/BC,EAAejB,EAAKkB,IAAI,SAACC,EAAgBC,GAC7CL,GAAkCM,KAAKC,IAAIH,EAAiB,KAE5D,IAAMI,EAAqBrB,EAAYkB,GAGvC,GAFAJ,GAAkCK,KAAKC,IAAIC,EAAqB,KAEjD,MAAXpB,GAAoBA,EAAQqB,UAEzB,CAQL,IALA,IAAIC,EAAM,EACNC,EAAQ,EAERC,EAAaP,EAAIjB,EAAQqB,UAEtBG,EAAaP,EAAIjB,EAAQqB,WAAW,CAEzCC,GAD4BzB,EAAK2B,IAAe,IAEhDD,GAAS,EACTC,GAAc,EAGhB,OAAOF,EAAMC,EAhBb,OAAOP,IAoBPS,EAAkB,EAElBC,EAAsB,EACtBC,EAAwB,EACxBC,EAAsB,EAE1BtB,EAAkBuB,QAAQC,QAAQ,SAACC,EAAcd,GAC3Cc,EAAeN,IACjBA,EAAkBM,GAGpB,IAAMC,EAAmBxB,EAAsBqB,QAAQZ,GACvDS,GAAuBM,EACvBL,GAAyB,EAErBK,EAAmBJ,IACrBA,EAAsBI,KAI1B,IAAMC,EAAsBrB,EAAiCf,EAAKO,OAC5D8B,EACJR,EAAsBC,GAAyB,EAE3CQ,EACJtB,EAAiCd,EAAYK,OAE/CE,EAAkBuB,QAAUvB,EAAkBuB,QAAQO,OACpDH,GAEFzB,EAAsBqB,QAAUrB,EAAsBqB,QAAQO,OAC5DD,GAIEzB,KAAKC,MAAQF,EAAqBoB,QAAU,MAC9CvB,EAAkBuB,QAAQQ,QAC1B7B,EAAsBqB,QAAQQ,SAGhC,IAAMC,EAASH,EAAsD,IAA5BD,EAEzC,OACExC,EAAA6C,EAAAC,cAACvC,EAAD,CACEJ,KAAMiB,EACNf,YAAaA,EACbuC,OAAQA,EACRG,UAAWR,EACXD,iBAAkBG,wKChHpBO,EAAe,CACnB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,WACvB,CAAC,UAAW,UAAW,YAGGA,EAAa3B,IAAI,SAAC4B,EAAa1B,GAAd,MAAqB,CAChE2B,GAAI3B,EACJ0B,iBAGF,SAASE,IACP,OAAOH,EAAaxB,KAAK4B,MAAM5B,KAAK6B,SAAWL,EAAatC,SAGvD,SAAS4C,EAAgBC,EAAmBC,GAGjD,IAFA,IAAMC,EAAmB,GAElBA,EAAO/C,OAAS6C,GAAW,CAChC,IAAMG,EAAeP,IACfQ,EAAcD,EAAalC,KAAK4B,MAAM5B,KAAK6B,SAAWK,EAAahD,SAEzE,GAAI8C,GAAaC,EAAOG,SAASD,GAC/B,MAGFF,EAAOI,KAAKF,GAEd,OAAOF,EAGF,SAASK,IACd,OAAOR,EAAgB,GAAG,GAGrB,SAASS,IACd,IAAMC,EAASC,OAAAC,EAAA,EAAAD,CAAOd,KACtB,OAAI3B,KAAK6B,UAAY,GACZW,EAAUG,UAEVH,sHC6BII,cApE2C,SAAA5D,GAAc,IAAXL,EAAWK,EAAXL,KACrDkE,EAAYxD,iBAA0B,MA2D5C,OAzDAyD,YAAmB,WAAM,IAAAC,EACmCC,OAAlDC,EADeF,EACfE,WAAYC,EADGH,EACHG,YADGC,EAAAJ,EACUK,wBADV,IAAAD,EAC6B,EAD7BA,EAGjBE,EAASR,EAAUlC,QACzB0C,EAAOC,MAAQL,EAAaG,EAC5BC,EAAOE,OAASL,EAAcE,EAG9B,IAAMI,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,UAAY,UAChBF,EAAIG,SAAS,EAAG,EAAGN,EAAOC,MAAOD,EAAOE,SACvC,IAEHK,oBAAU,WACR,IAAMP,EAASR,EAAUlC,QACnB6C,EAAMH,EAAOI,WAAW,MAOxBI,EAAab,OAAOc,YALV,WACdN,EAAIE,UAAY,sBAChBF,EAAIG,SAAS,EAAG,EAAGN,EAAOC,MAAOD,EAAOE,SAGK,GAC/C,OAAO,kBAAMP,OAAOe,cAAcF,KACjC,IAGHD,oBAAU,WACR,IAAMP,EAASR,EAAUlC,QACnB6C,EAAMH,EAAOI,WAAW,MAC9BD,EAAIQ,UArCW,GAsCfR,EAAIS,QAAU,QAEd,IAAMhC,ECxCH,SAAmBF,GACxB,OAAQA,GACN,KAAK,EACH,OAAOQ,cACT,KAAK,EACH,OAAOT,YAAgB,GAAG,GAC5B,KAAK,EACH,MAAO,CAACQ,eACV,QACE,OAAOC,eD+BM2B,CAAU,GAEnBC,EAAad,EAAOC,MAAQ3E,EAAKO,OAEvC+C,EAAOrB,QAAQ,SAACwD,EAAOrE,GACrByD,EAAIa,YAAcD,EAClBZ,EAAIc,YAEJ,IAAIC,EA/CY,EA+CRxE,EACRyD,EAAIgB,OAAOD,EAAGlB,EAAOE,OAAS,GAE9B5E,EAAKiC,QAAQ,SAAA6D,GACX,IAAMC,EACHD,EAAc,IAASpB,EAAOE,OAnDnB,EAoDKtB,EAAO/C,OAAU,EACpCsE,EAAImB,OAAOJ,EAAGG,EAAI3E,GArDJ,EAqD0BkC,EAAO/C,OAAU,IACzDqF,GAAKJ,IAGPX,EAAImB,OAAOJ,EAAGlB,EAAOE,OAAS,GAC9BC,EAAIoB,YAEL,CAACjG,IAGFkG,EAAAxD,EAAAC,cAAA,OAAKwD,UAAU,YACbD,EAAAxD,EAAAC,cAAA,OAAKwD,UAAU,aACfD,EAAAxD,EAAAC,cAAA,UAAQyD,IAAKlC","file":"static/js/6.1684ec1c.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { Options } from './index';\nimport './Visualization.scss';\n\nexport type Props = {\n  // array of frequency data with values 0-255\n  data: Uint8Array;\n  lowPassData: Uint8Array;\n  options?: Options;\n};\n\nexport type WrappedProps = {\n  data: Uint8Array;\n  lowPassData: Uint8Array;\n  isBeat: boolean;\n  intensity: number;\n  lowPassIntensity: number;\n};\n\nconst defaultProps: Props = {\n  data: new Uint8Array(),\n  lowPassData: new Uint8Array(),\n  options: {}\n};\n\n// all visualization components should be wrapped with this HOC\nexport function wrap(\n  WrappedComponent: React.ComponentType<WrappedProps>\n): React.ComponentType<Props> {\n  return function({ data, lowPassData, options }: Props = defaultProps) {\n    const rawIntensitiesRef = useRef<number[]>([]);\n    const lowPassIntensitiesRef = useRef<number[]>([]);\n    const startingTimestampRef = useRef<number>(Date.now());\n\n    let totalDifferenceFromRawBaseline = 0;\n    let totalDifferenceFromLowBaseline = 0;\n\n    const renderedData = data.map((rawDataElement, i) => {\n      totalDifferenceFromRawBaseline += Math.abs(rawDataElement - 128);\n\n      const lowPassDataElement = lowPassData[i];\n      totalDifferenceFromLowBaseline += Math.abs(lowPassDataElement - 128);\n\n      if (options == null || !options.smoothing) {\n        return rawDataElement;\n      } else {\n        // smooth out each data value using a range of values around it,\n        // the range of this window is the value of options.smoothing\n        let sum = 0;\n        let count = 0;\n\n        let rangeIndex = i - options.smoothing;\n\n        while (rangeIndex < i + options.smoothing) {\n          const rawDataAtRangeIndex = data[rangeIndex] || 128;\n          sum += rawDataAtRangeIndex;\n          count += 1;\n          rangeIndex += 1;\n        }\n\n        return sum / count;\n      }\n    });\n\n    let rawIntensityMax = 0;\n\n    let lowPassIntensitySum = 0;\n    let lowPassIntensityCount = 0;\n    let lowPassIntensityMax = 0;\n\n    rawIntensitiesRef.current.forEach((rawIntensity, i) => {\n      if (rawIntensity > rawIntensityMax) {\n        rawIntensityMax = rawIntensity;\n      }\n\n      const lowPassIntensity = lowPassIntensitiesRef.current[i];\n      lowPassIntensitySum += lowPassIntensity;\n      lowPassIntensityCount += 1;\n\n      if (lowPassIntensity > lowPassIntensityMax) {\n        lowPassIntensityMax = lowPassIntensity;\n      }\n    });\n\n    const currentRawIntensity = totalDifferenceFromRawBaseline / data.length;\n    const recentLowPassAvgIntensity =\n      lowPassIntensitySum / lowPassIntensityCount || 0;\n\n    const currentLowPassIntensity =\n      totalDifferenceFromLowBaseline / lowPassData.length;\n\n    rawIntensitiesRef.current = rawIntensitiesRef.current.concat(\n      currentRawIntensity\n    );\n    lowPassIntensitiesRef.current = lowPassIntensitiesRef.current.concat(\n      currentLowPassIntensity\n    );\n\n    // remove intensities older than 2 seconds\n    if (Date.now() - startingTimestampRef.current > 2000) {\n      rawIntensitiesRef.current.shift();\n      lowPassIntensitiesRef.current.shift();\n    }\n\n    const isBeat = currentLowPassIntensity > recentLowPassAvgIntensity * 1.5;\n\n    return (\n      <WrappedComponent\n        data={renderedData}\n        lowPassData={lowPassData}\n        isBeat={isBeat}\n        intensity={currentRawIntensity}\n        lowPassIntensity={currentLowPassIntensity}\n      />\n    );\n  };\n}\n","const colorTriples = [\n  ['#0E9AA7', '#F6CD61', '#FE8A71'],\n  ['#EE4540', '#801336', '#2D142C'],\n  ['#8FB9A8', '#FDFBD4', '#FCD0BA'],\n  ['#AC6D83', '#685D79', '#465C7A'],\n  ['#F36E38', '#EF4648', '#582841'],\n  ['#F1F1F1', '#9BD7D1', '#305D7A'],\n  ['#DEA5B6', '#F3CD8C', '#F2E9C2'],\n  ['#E27B47', '#EFCA58', '#46B29E'],\n  ['#2E7345', '#2E9975', '#2DB3B3'],\n  ['#52A3CC', '#7EA1E5', '#AAAAF2'],\n  ['#CC5285', '#CC5285', '#F2BCAA'],\n  ['#D8E0BB', '#B6CEC7', '#86A3C3']\n];\n\nconst colorTriplesWithIds = colorTriples.map((colorTriple, i) => ({\n  id: i,\n  colorTriple\n}));\n\nfunction randomColorTriple() {\n  return colorTriples[Math.floor(Math.random() * colorTriples.length)];\n}\n\nexport function getRandomColors(numColors: number, areUnique?: boolean): string[] {\n  const colors: string[] = [];\n\n  while (colors.length < numColors) {\n    const randomTriple = randomColorTriple();\n    const randomColor = randomTriple[Math.floor(Math.random() * randomTriple.length)];\n\n    if (areUnique && colors.includes(randomColor)) {\n      break;\n    }\n\n    colors.push(randomColor);\n  }\n  return colors;\n}\n\nexport function getRandomColor() {\n  return getRandomColors(1)[0];\n}\n\nexport function getRandomColorTriple() {\n  const colorCopy = [...randomColorTriple()];\n  if (Math.random() <= 0.5) {\n    return colorCopy.reverse();\n  } else {\n    return colorCopy;\n  }\n}\n","import React, { useRef, useEffect } from 'react';\nimport * as VisualizationHOC from '../VisualizationHOC';\nimport { getColors } from './utils';\nimport { useDebouncedResize } from '../../../../utils/hooks';\nimport './Waveform.scss';\n\nconst LINE_WIDTH = 10;\nconst LINE_X_OFFSET = 0;\nconst LINE_Y_OFFSET = 5;\n\nconst Waveform: React.FC<VisualizationHOC.WrappedProps> = ({ data }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useDebouncedResize(() => {\n    const { innerWidth, innerHeight, devicePixelRatio = 1 } = window;\n\n    const canvas = canvasRef.current!;\n    canvas.width = innerWidth * devicePixelRatio;\n    canvas.height = innerHeight * devicePixelRatio;\n\n    // initial paint to match fade out color from rounding error\n    const ctx = canvas.getContext('2d')!;\n    ctx.fillStyle = '#101010';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current!;\n    const ctx = canvas.getContext('2d')!;\n\n    const fadeOut = () => {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    const intervalId = window.setInterval(fadeOut, 7);\n    return () => window.clearInterval(intervalId);\n  }, []);\n\n  // paint on every data update\n  useEffect(() => {\n    const canvas = canvasRef.current!;\n    const ctx = canvas.getContext('2d')!;\n    ctx.lineWidth = LINE_WIDTH;\n    ctx.lineCap = 'round';\n\n    const colors = getColors(2);\n\n    const sliceWidth = canvas.width / data.length;\n\n    colors.forEach((color, i) => {\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n\n      let x = i * LINE_X_OFFSET;\n      ctx.moveTo(x, canvas.height / 2);\n\n      data.forEach(dataElement => {\n        const y =\n          (dataElement / 255.0) * canvas.height -\n          (LINE_Y_OFFSET * colors.length) / 2;\n        ctx.lineTo(x, y + i * ((LINE_Y_OFFSET * colors.length) / 2));\n        x += sliceWidth;\n      });\n\n      ctx.lineTo(x, canvas.height / 2);\n      ctx.stroke();\n    });\n  }, [data]);\n\n  return (\n    <div className=\"waveform\">\n      <div className=\"backdrop\" />\n      <canvas ref={canvasRef} />\n    </div>\n  );\n};\n\nexport default VisualizationHOC.wrap(Waveform);\n","import {\n  getRandomColorTriple,\n  getRandomColors,\n  getRandomColor\n} from '../../../../utils/colors';\n\nexport function getColors(numColors: number) {\n  switch (numColors) {\n    case 3:\n      return getRandomColorTriple();\n    case 2:\n      return getRandomColors(2, true);\n    case 1:\n      return [getRandomColor()];\n    default:\n      return getRandomColorTriple();\n  }\n}\n"],"sourceRoot":""}